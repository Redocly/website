# Redocly Security Ruleset
# Based on OWASP API Security Top 10 2023
# https://owasp.org/www-project-api-security/

plugins:
  - './security-functions.js'

  
# Enable built-in security rules
rules:
  # Built-in Redocly security rules
  security-defined: error
  operation-4xx-response: error
  operation-2xx-response: error
  no-unresolved-refs: error
  
  # ==========================================
  # API1:2023 - Broken Object Level Authorization
  # ==========================================
  
  # Prevent numeric IDs that can be easily guessed
  rule/no-numeric-ids:
    subject:
      type: Schema
      property: type
      filterInParentKeys: [path]
    where:
      - subject:
          type: Parameter
          property: name
        assertions:
          pattern: /(^id$|_id$|Id$|-id$)/
    assertions:
      enum: [string]
    message: "Use random IDs that cannot be guessed (UUIDs are preferred). Avoid integer IDs in path parameters."
    severity: error

  # Ensure ID parameters use appropriate formats
  rule/id-format-required:
    subject:
      type: Schema
      property: format
      filterInParentKeys: [path]
    where:
      - subject:
          type: Parameter
          property: name
        assertions:
          pattern: /(^id$|_id$|Id$|-id$)/
    assertions:
      enum: [uuid, uri, password]
    message: "ID parameters should specify a secure format like 'uuid'."
    severity: warn

  # ==========================================
  # API2:2023 - Broken Authentication
  # ==========================================

  # Enforce HTTPS for all server URLs
  rule/https-server-urls:
    subject:
      type: Server
      property: url
    assertions:
      pattern: /^https:/
    message: "Server URLs must use HTTPS protocol. HTTP is insecure and exposes data to interception."
    severity: error

  # Prevent HTTP Basic authentication
  rule/no-http-basic-auth:
    subject:
      type: SecurityScheme
      property: scheme
    where:
      - subject:
          type: SecurityScheme
          property: type
        assertions:
          const: http
    assertions:
      notPattern: /^basic$/i
    message: "HTTP Basic authentication is insecure. Use OAuth 2.0, API keys in headers, or other secure methods."
    severity: error

  # Prevent API keys in URL (query/path)
  rule/no-api-keys-in-url:
    subject:
      type: SecurityScheme
      property: in
    where:
      - subject:
          type: SecurityScheme
          property: type
        assertions:
          const: apiKey
    assertions:
      enum: [header, cookie]
    message: "API keys must not be in URL (query or path parameters). Use headers or cookies instead."
    severity: error

  # Prevent credentials in parameter names
  rule/no-credentials-in-parameters:
    subject:
      type: Parameter
      property: name
      filterInParentKeys: [query, path]
    assertions:
      notPattern: /(secret|token|access.?token|refresh.?token|id.?token|password|api.?key|credential)/i
    message: "Parameter names must not contain credential-related terms. Use secure authentication headers instead."
    severity: error

  # Ensure write operations are protected
  rule/write-operations-secured:
    subject:
      type: Operation
      property: security
      filterInParentKeys: [post, put, patch, delete]
    assertions:
      defined: true
      nonEmpty: true
    message: "Write operations (POST, PUT, PATCH, DELETE) must be protected by security schemes."
    severity: error

  # JWT bearer format security schemes should reference RFC8725
  rule/jwt-rfc8725-compliance:
    subject:
      type: SecurityScheme
      property: description
    where:
      - subject:
          type: SecurityScheme
          property: bearerFormat
        assertions:
          pattern: /jwt/i
    assertions:
      pattern: /RFC\s*8725/i
    message: "JWT security schemes must reference RFC8725 compliance in description for security best practices."
    severity: error

  # Advanced cross-operation security validation (requires custom functions)
  rule/comprehensive-security-check:
    subject:
      type: Root
    assertions:
      security/checkOperationSecurity:
        methods: [post, put, patch, delete]
        nullable: false
    message: "All write operations must have properly configured security schemes"
    severity: error

  # ==========================================
  # API3:2023 - Broken Object Property Level Authorization
  # ==========================================

  # Prevent unconstrained additionalProperties
  rule/no-additional-properties:
    subject:
      type: Schema
      property: additionalProperties
    where:
      - subject:
          type: Schema
          property: type
        assertions:
          const: object
    assertions:
      const: false
    message: "Objects should not allow additionalProperties. Set to false to prevent mass assignment vulnerabilities."
    severity: warn

  # Require maxProperties when additionalProperties is not false
  rule/constrained-additional-properties:
    subject:
      type: Schema
      property: maxProperties
    where:
      - subject:
          type: Schema
          property: type
        assertions:
          const: object
      - subject:
          type: Schema
          property: additionalProperties
        assertions:
          defined: true
          notPattern: /^false$/
    assertions:
      defined: true
    message: "Objects with additionalProperties should define maxProperties to limit resource consumption."
    severity: warn

  # ==========================================
  # API4:2023 - Unrestricted Resource Consumption
  # ==========================================

  # Require rate limiting headers in responses
  rule/rate-limit-headers-present:
    subject:
      type: Header
    where:
      - subject:
          type: Response
          filterInParentKeys: ["200", "201", "202", "204", "400", "401", "403", "404", "422", "429"]
        assertions:
          defined: true
    assertions:
      pattern: /^(RateLimit|RateLimit-Limit|X-RateLimit-Limit|X-Rate-Limit-Limit)$/i
    message: "2XX and 4XX responses should include rate limiting headers (RateLimit, RateLimit-Limit, X-RateLimit-Limit, or X-Rate-Limit-Limit)."
    severity: warn

  # Require 429 Too Many Requests response
  rule/require-429-response:
    subject:
      type: Responses
      property: "429"
    assertions:
      defined: true
    message: "Operations should define a 429 (Too Many Requests) response for rate limiting."
    severity: warn

  # Retry-After header required for 429 responses
  rule/retry-after-header-429:
    subject:
      type: Header
    where:
      - subject:
          type: Response
          filterInParentKeys: ["429"]
        assertions:
          defined: true
    assertions:
      pattern: /^Retry-After$/i
    message: "429 responses must include a Retry-After header to indicate when clients can retry."
    severity: error

  # Array schemas must specify maxItems
  rule/array-max-items:
    subject:
      type: Schema
      property: maxItems
    where:
      - subject:
          type: Schema
          property: type
        assertions:
          const: array
    assertions:
      defined: true
    message: "Array schemas must specify maxItems to prevent resource exhaustion attacks."
    severity: error

  # String schemas must have length constraints
  rule/string-length-limit:
    subject:
      type: Schema
    where:
      - subject:
          type: Schema
          property: type
        assertions:
          const: string
    assertions:
      requireAny:
        - maxLength
        - enum
        - const
        - pattern
    message: "String schemas must specify maxLength, enum, const, or pattern to limit resource consumption."
    severity: error

  # Integer schemas must have min/max constraints
  rule/integer-constraints:
    subject:
      type: Schema
    where:
      - subject:
          type: Schema
          property: type
        assertions:
          const: integer
    assertions:
      required: [minimum, maximum]
    message: "Integer schemas must specify minimum and maximum values to prevent resource exhaustion."
    severity: error

  # Integer schemas should specify format
  rule/integer-format:
    subject:
      type: Schema
      property: format
    where:
      - subject:
          type: Schema
          property: type
        assertions:
          const: integer
    assertions:
      enum: [int32, int64]
    message: "Integer schemas should specify format (int32 or int64) for precise validation."
    severity: warn

  # Advanced rate limiting consistency validation (requires custom functions)
  rule/rate-limit-consistency:
    subject:
      type: Root
    assertions:
      security/validateRateLimitConsistency:
        requiredHeaders: [RateLimit, X-RateLimit-Limit, X-Rate-Limit-Limit]
    message: "Rate limiting configurations should be consistent across operations"
    severity: warn

  # ==========================================
  # API5:2023 - Broken Function Level Authorization
  # ==========================================

  # Administrative endpoints should have stricter security
  rule/admin-endpoints-secured:
    subject:
      type: Operation
      property: security
    where:
      - subject:
          type: PathItem
        assertions:
          pattern: /(admin|manage|control|configure)/i
    assertions:
      defined: true
      nonEmpty: true
    message: "Administrative endpoints must have defined security schemes with appropriate authorization levels."
    severity: error

  # Advanced admin security isolation validation (requires custom functions)
  rule/admin-security-isolation:
    subject:
      type: Root
    assertions:
      security/validateAdminSecurity:
        adminUrlPattern: "/admin"
    message: "Administrative endpoints must use different security schemes than regular operations"
    severity: error

  # Advanced OAuth scope validation (requires custom functions)
  rule/oauth-scope-validation:
    subject:
      type: Root
    assertions:
      security/validateOAuthScopes:
        adminOperations: [delete, post, put, patch]
        requiredAdminScopes: [admin, write, manage]
        adminPathPatterns: ["/admin", "/manage", "/config", "/system"]
    message: "OAuth scopes must be appropriate for operation sensitivity"
    severity: error

  # ==========================================
  # API7:2023 - Server Side Request Forgery
  # ==========================================

  # Warn about URL parameters that might lead to SSRF
  rule/ssrf-url-parameters:
    subject:
      type: Parameter
      property: name
    assertions:
      notPattern: /(callback|redirect|url|uri|endpoint|webhook|fetch|proxy)/i
    message: "URL-related parameters may be vulnerable to Server Side Request Forgery. Ensure proper validation and allowlisting."
    severity: warn

  # ==========================================
  # API8:2023 - Security Misconfiguration
  # ==========================================

  # Require CORS headers in responses
  rule/cors-access-control-allow-origin:
    subject:
      type: Header
    where:
      - subject:
          type: Response
        assertions:
          defined: true
    assertions:
      pattern: /^Access-Control-Allow-Origin$/i
    message: "Responses should define CORS headers (Access-Control-Allow-Origin) to control cross-origin access."
    severity: warn

  # Require error response schemas (400, 401, 403, 500)
  rule/error-responses-defined:
    subject:
      type: Responses
    assertions:
      requireAny: ["400", "401", "403", "422", "4XX"]
    message: "Operations should define appropriate error responses (400, 401, 403, 422, or 4XX) with proper schemas."
    severity: warn

  # Require 401 unauthorized responses for secured operations
  rule/unauthorized-response-required:
    subject:
      type: Responses
      property: "401"
    where:
      - subject:
          type: Operation
          property: security
        assertions:
          defined: true
    assertions:
      defined: true
    message: "Secured operations should define 401 (Unauthorized) responses."
    severity: warn

  # Require 500 server error responses
  rule/server-error-response:
    subject:
      type: Responses
      property: "500"
    assertions:
      defined: true
    message: "Operations should define 500 (Internal Server Error) responses to handle server errors gracefully."
    severity: warn

  # ==========================================
  # API9:2023 - Improper Inventory Management
  # ==========================================

  # Server objects should declare internal/external audience
  rule/server-audience-declaration:
    subject:
      type: Server
      property: x-internal
    assertions:
      defined: true
      enum: ['true', 'false']
    message: "Servers should declare their intended audience using x-internal (true for internal, false for external)."
    severity: error

  # Server descriptions should indicate environment
  rule/server-environment-declaration:
    subject:
      type: Server
      property: description
    assertions:
      pattern: /(local|dev|development|test|testing|stage|staging|prod|production|live|sandbox)/i
    message: "Server descriptions should clearly indicate the environment (development, testing, staging, production)."
    severity: error

  # API version should be clearly defined
  rule/api-version-defined:
    subject:
      type: Info
      property: version
    assertions:
      defined: true
      pattern: /^\d+\.\d+\.\d+/
    message: "API version should be clearly defined using semantic versioning (e.g., 1.0.0)."
    severity: error

  # ==========================================
  # Additional Security Rules
  # ==========================================

  # Prevent sensitive data in examples
  rule/no-sensitive-data-in-examples:
    subject:
      type: Schema
      property: example
    assertions:
      notPattern: /(password|secret|token|key|credential|ssn|social.?security|credit.?card|api.?key)/i
    message: "Examples should not contain sensitive data like passwords, tokens, or personal information."
    severity: warn

  # Ensure request bodies have proper content types
  rule/secure-content-types:
    subject:
      type: MediaType
    where:
      - subject:
          type: RequestBody
        assertions:
          defined: true
    assertions:
      enum: 
        - application/json
        - application/xml
        - application/x-www-form-urlencoded
        - multipart/form-data
        - text/plain
    message: "Use secure and well-defined content types. Avoid allowing arbitrary content types."
    severity: warn

  # Prevent overly broad schemas
  rule/no-empty-schemas:
    subject:
      type: Schema
    assertions:
      requireAny:
        - type
        - properties
        - items
        - allOf
        - anyOf
        - oneOf
        - $ref
    message: "Schemas should not be empty. Define proper constraints to prevent accepting arbitrary data."
    severity: error
